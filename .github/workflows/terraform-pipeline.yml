name: Terraform Infrastructure Deployment

on:
  push:
    branches:
      - test
  workflow_dispatch:

jobs:
  setup-state-storage:
    name: Setup S3 and DynamoDB for Terraform State
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          region: ${{ vars.TF_VAR_aws_region }}

      - name: Check if S3 Bucket Exists
        run: |
          BUCKET_NAME="my-terraform-state-bucket"
          if aws s3api head-bucket --bucket "$BUCKET_NAME" 2>/dev/null; then
            echo "Bucket $BUCKET_NAME already exists. Skipping creation."
          else
            echo "Bucket $BUCKET_NAME does not exist. Creating..."
            aws s3api create-bucket --bucket "$BUCKET_NAME" --region ${{ vars.TF_VAR_aws_region }} --create-bucket-configuration LocationConstraint=${{ vars.TF_VAR_aws_region }}
            aws s3api put-bucket-versioning --bucket "$BUCKET_NAME" --versioning-configuration Status=Enabled
            aws s3api put-bucket-encryption --bucket "$BUCKET_NAME" --server-side-encryption-configuration '{"Rules":[{"ApplyServerSideEncryptionByDefault":{"SSEAlgorithm":"AES256"}}]}'
          fi

      - name: Check if DynamoDB Table Exists
        run: |
          TABLE_NAME="my-terraform-lock-table"
          if aws dynamodb describe-table --table-name "$TABLE_NAME" 2>/dev/null; then
            echo "DynamoDB table $TABLE_NAME already exists. Skipping creation."
          else
            echo "DynamoDB table $TABLE_NAME does not exist. Creating..."
            aws dynamodb create-table \
              --table-name "$TABLE_NAME" \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --billing-mode PAY_PER_REQUEST \
              --tags Key=Name,Value=TerraformLockTable Key=Environment,Value=${{ vars.TF_VAR_environment_name }}
          fi

  terraform-deploy:
    name: Terraform Deployment
    runs-on: ubuntu-latest
    needs: setup-state-storage
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
      TF_VAR_aws_region: ${{ vars.TF_VAR_aws_region }}
      TF_VAR_environment_name: ${{ vars.TF_VAR_environment_name }}
      TF_VAR_vpc_cidr: ${{ vars.TF_VAR_vpc_cidr }}
      TF_VAR_public_subnet_cidrs: ${{ vars.TF_VAR_public_subnet_cidrs }}
      TF_VAR_private_subnet_cidrs: ${{ vars.TF_VAR_private_subnet_cidrs }}
      TF_VAR_availability_zones: ${{ vars.TF_VAR_availability_zones }}
      TF_VAR_cluster_name: ${{ vars.TF_VAR_cluster_name }}
      TF_VAR_cluster_version: ${{ vars.TF_VAR_cluster_version }}
      TF_VAR_applications: ${{ vars.TF_VAR_applications }}
      TF_VAR_commit_short_sha: ${{ vars.TF_VAR_commit_short_sha }}
      TF_VAR_docker_url: ${{ vars.TF_VAR_docker_url }}

    steps:
      - name: Debug Terraform Variables
        run: |
          echo "AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID"
          echo "AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY"
          echo "AWS_SESSION_TOKEN=$AWS_SESSION_TOKEN"
          echo "TF_VAR_aws_region=$TF_VAR_aws_region"
          echo "TF_VAR_environment_name=$TF_VAR_environment_name"
          echo "TF_VAR_vpc_cidr=$TF_VAR_vpc_cidr"
          echo "TF_VAR_public_subnet_cidrs=$TF_VAR_public_subnet_cidrs"
          echo "TF_VAR_private_subnet_cidrs=$TF_VAR_private_subnet_cidrs"
          echo "TF_VAR_availability_zones=$TF_VAR_availability_zones"
          echo "TF_VAR_cluster_name=$TF_VAR_cluster_name"
          echo "TF_VAR_cluster_version=$TF_VAR_cluster_version"
          echo "TF_VAR_applications=$TF_VAR_applications"
          echo "TF_VAR_commit_short_sha=$TF_VAR_commit_short_sha"
          echo "TF_VAR_docker_url=$TF_VAR_docker_url"

      # 1. Checkout Repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Set up Terraform CLI
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.8

      # 3. Initialize Terraform with Backend Configuration
      - name: Initialize Terraform
        working-directory: terraform
        run: |
          terraform init -backend-config="bucket=my-terraform-state-bucket" \
                         -backend-config="key=terraform/state" \
                         -backend-config="region=${{ vars.TF_VAR_aws_region }}" \
                         -backend-config="dynamodb_table=my-terraform-lock-table" \
                         -backend-config="encrypt=true"

      # 4. Plan Terraform Changes
      - name: Terraform Plan
        working-directory: terraform
        run: terraform plan

      # 5. Apply Terraform Changes
      - name: Terraform Apply
        working-directory: terraform
        run: terraform apply -auto-approve
